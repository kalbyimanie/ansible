---
- name: create user {{ gather_users }}
  become: yes
  user:
    name: "{{ item.username }}"
    password: "{{ item.userpass | password_hash('sha512') }}"
    state: present
    shell: /bin/bash
    createhome: yes
    home: "/home/{{ item.username }}"
  with_items:
    - "{{ users[user_name] }}"
  tags: ['add_user']
  register: 'add_user'

- name: modify user password for {{ gather_users }}
  become: yes
  user:
    name: "{{ item.username }}"
    password: "{{ item.userpass | password_hash('sha512') }}"
  with_items:
    - "{{ users[user_name] }}"
  tags: ['modify_user_pass']
  register: 'modify_user_pass'

- name: Confirm to delete user 
  pause:
    prompt: Are you sure want to delete user {{ gather_users }} ? (press enter to continue OR ctrl + c then a, to abort)
  tags: ['delete_user']

# NOTE backup user home dir before deleting user
- name: create backup user home dir files
  become: yes
  file:
    path: "/home/users-backup/{{ item.username }}"
    state: directory  
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
  with_items:
    - "{{ users[user_name] }}"
  register: 'create_home_dir_bak'
  tags: ['delete_user', 'create_home_dir_bak']

- name: backup user home dir files
  become: yes
  shell: cp -rpv /home/{{ item.username }} /home/users-backup/
  with_items:
    - "{{ users[user_name] }}"
  register: 'copy_home_dir_bak'
  tags: ['delete_user', 'copy_home_dir_bak']

- name: delete user {{ gather_users }}
  become: yes
  user:
    name: "{{ item.username }}"
    state: absent
    remove: yes
    force: yes
  with_items:
    - "{{ users[user_name] }}"
  tags: ['delete_user']
  register: 'delete_user'

- name: checking for available user sudoers command
  become: yes
  shell: cat /etc/sudoers | grep -c "%{{ item.username }}"
  ignore_errors: yes
  with_items:
    - "{{ users[user_name] }}"
  register: 'check_sudoers_line'
  tags: ['add_admin_cmd']

- name: replace line to grant user {{ gather_users }} to execute selected administrative commands
  become: yes
  lineinfile:
    regexp: '^%{{ user_name }}.*'
    line: "{{ lookup('template', 'add_admin_cmd.j2') }}"
    path: "/etc/sudoers"
  tags: ['add_admin_cmd']
  register: 'add_admin_cmd'
  when: item.stdout == '1'
  with_items: "{{ check_sudoers_line.results }}"

- name: add line to grant user {{ gather_users }} to execute selected administrative commands
  become: yes
  lineinfile:
    line: "{{ lookup('template', 'add_admin_cmd.j2') }}"
    path: "/etc/sudoers"
  tags: ['add_admin_cmd']
  register: 'add_admin_cmd'
  when: item.stdout == '0'
  with_items: "{{ check_sudoers_line.results }}"

- name: sudoers syntax check
  become: yes
  shell: visudo -c
  tags: ['add_admin_cmd']
  register: 'sudoers_syntax_check'

- name: sudoers syntax check
  debug: msg={{ sudoers_syntax_check.stdout_lines }}
  tags: ['add_admin_cmd']

- name: add group {{ gather_groups }} to user {{ gather_users }}
  become: yes
  user:
    name: "{{ item.username }}"
    groups:
      - "{{ item.usergroup.groupname | join(', ') }}"
    append: no
  tags: ['add_user_to_other_group']
  with_items:
    - "{{ users[user_name] }}"
  register: 'add_user_to_other_group'

- name: create directory .ssh for user {{ gather_users }}
  become: yes
  file:
    path: "/home/{{ item.username }}/.ssh"
    state: directory  
    owner: "{{ item.username }}"
    group: "{{ item.username }}"
  with_items:
    - "{{ users[user_name] }}"
  register: 'add_ssh_dir'
  tags: ['add_user', 'create_ssh_dir']

- name: create file .ssh/authorized_keys for user {{ gather_users }}
  become: yes
  file:
    path: "/home/{{ item.username }}/.ssh/authorized_keys"
    state: touch
    owner: "{{ item.username }}"
    group: "{{ item.username }}" 
  with_items:
    - "{{ users[user_name] }}"
  register: 'add_ssh_dir'
  tags: ['add_user', 'create_ssh_dir']

- name: authorized user {{ gather_users }} ssh pubkey
  become: yes
  lineinfile:
    line: "{{ lookup('template', 'ssh_pubkey.j2') }}"
    path: "/home/{{ item.username }}/.ssh/authorized_keys"
  with_items:
    - "{{ users[user_name] }}"
  register: 'add_ssh_pubkey'
  tags: ['add_user', 'add_ssh_pubkey']

# NOTE restore user home dir 
- name: restore user home dir files
  become: yes
  shell: |
    mkdir -p /home/{{ item.username }}/{{ item.username }}-backup
    cp -rfpv /home/users-backup/{{ item.username }} /home/{{ item.username }}/{{ item.username }}-backup
  with_items:
    - "{{ users[user_name] }}"
  register: 'restore_home_dir_bak'
  tags: ['add_user', 'restore_home_dir_bak']

# NOTE add new group
- name: add new group
  become: yes
  group:
    name: "{{ item.groupname }}"
    state: present
  with_items:
    - "{{ groups[group_name] }}"
  tags: ['add_new_group']

- name: path to be granted to the group
  become: yes
  file:
    path: "{{ item.grantedpath }}"
    owner: root
    group: "{{ item.groupname }}"
  with_items:
    - "{{ groups[group_name] }}"
  tags: ['add_new_group', 'grant_new_group']

# - name: 
